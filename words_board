
#GENERATE 6 BY 8 EMPTY GAMEBOARD
#rows = 6
#cols = 8
#grid = []

#for i in range(rows):
#    row = []
#    for i in range(cols):
#     row.append(0)  # Fill the grid with 0s
#    grid.append(row)

#for row in grid:
#    print(row) #print grid
#Steps:
#Initialize the game board as a list with the dimensions 6x8 (6 columns, 8 rows)
#Begin by placing the spanagram which must touch 2 opposite sides of the board
#Loop through each theme word and attempt to place it on the board
#Check that each theme word can be placed horizontally or vertically without overlapping any existing words
#If a word can be placed without overlap, add it to the board
#Repeat this until all of the theme words are placed
#If the function can not place each word without overlap, create a backtrack function that will try other positions/directions


#TEST CASES
#thats_fortunate = ["HORSESHOE", "LUCKYCHARMS", "WISHBONE", "LADYBUG", "PENNY", "SHAMROCK"]
#whats_the_issue = ["TIME", "HIGHLIGHTS", "VOGUE", "MAGAZINES", "WIRED", "SEVENTEEN", "PEOPLE"]
#world_piece = ["MARSH", "MOUNTAIN", "SWAMP", "TERRAIN", "PLAIN", "FOREST", "TUNDRA", "DESERT"]


#DEFINE BOARD
boardsize = [8,6] 
gameboard = [[' ' for i in range(boardsize[1])] for i in range (boardsize[0])]

import random
world_piece = ["MARSH", "MOUNTAIN", "SWAMP", "TERRAIN", "PLAIN", "FOREST", "TUNDRA", "DESERT"]
def words_on_board (world_piece, gameboard, boardsize):
    for i in range (0, len(world_piece)):
        
        #random placement on gameboard
        start_row = random.randint(0, boardsize[0] - 1)
        start_col = random.randint(0, boardsize[1] - 1)
        direction = random.choice(['vertical', 'horizontal'])
        
        for letter in world_piece[i]:
            if start_row < 0 or start_row >= boardsize[0] or start_col < 0 or start_col >=boardsize[1] or (gameboard[start_row][start_col] != ' ' and gameboard[start_row][start_col] != letter):
                break
            gameboard[start_row][start_col] = letter
            if direction =='vertical':
                start_row+=1
            else:
                start_col+=1

words_on_board(world_piece, gameboard, boardsize)
print (gameboard)
